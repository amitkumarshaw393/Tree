//same tree
#include<iostream>
#include<vector>
using namespace std;
struct node{
	int data;
	node* left;
	node*right;
};
node* newNode(int data)
{
	node* temp=new node();
	temp->data=data;
	temp->left=NULL;
	temp->right=NULL;
	return temp;
}

  void inorder(vector<int>&v,node* root)
    {
        if(root!=NULL)
        {
            inorder(v,root->left);
            v.push_back(root->data);
            inorder(v,root->right);
        }
        else
             v.push_back(10000);
            
    }
      void preorder(vector<int>&v2,node* root)
    {
        if(root!=NULL)
        {
             v2.push_back(root->data);
            preorder(v2,root->left);
            preorder(v2,root->right);
        }
          else
             v2.push_back(10000);
    }
    bool isSameTree(node* p, node* q) {
        vector<int>v,v1,v2,v3;
        inorder(v,p);
        inorder(v1,q);
        preorder(v2,p);
        preorder(v3,q);
        
        if(v==v1 && v2==v3)
            return true;
        else
            return false;
        
    }
    
int main(void)
{
	bool g;
	  node * root = newNode(1);
    root->left = newNode(6);
    root->right = newNode(3);
    root->left->left = newNode(4);
    root->left->right = newNode(5);
    node * ro = newNode(1);
    ro->left = newNode(2);
    ro->right = newNode(3);
    ro->left->left = newNode(4);
    ro->left->right = newNode(5);
    g=isSameTree(root,ro);
    cout<<g;


}
    
    
    /*
                   1
                 /   \
                2     3
               / \
              4   5
        
        */
   
}
